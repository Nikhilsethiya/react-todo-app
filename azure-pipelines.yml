trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - main

resources:
- repo: self

variables:
    # Reference the variable group
  # Inline variables
    dockerRegistryServiceConnection: '<docker-registry-service-connection-id>'
    imageRepository: '<image-repository-name>'
    containerRegistry: '<container-registry-name>.azurecr.io'
    dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
    tag: '$(Build.BuildId)'
    vmImageName: '<agent-pool-name>'

stages:
- stage: Build
  displayName: Build and Push Stage
  jobs:
  - job: Build
    displayName: Build
    pool:
     name: $(vmImageName)
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '<azure-subscription-name>'
        scriptType: 'bash'
        scriptLocation: 'inlineScript' 
        inlineScript: 'az acr login --name=$(containerRegistry)'
 
    - task: Docker@2
      displayName: Build and Push an Image to Container Registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Test
  displayName: Test Stage
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: test
      pool:
        name: $(vmImageName)
      steps:
      - task: SonarQubePrepare@7
        inputs:
          SonarQube: '<sonar-qube-service-connection>'
          scannerMode: 'cli'
          configMode: 'manual'
          cliProjectKey: '<project-key>'
          cliProjectName: '<project-name>'
          cliSources: '.'
      - task: SonarQubeAnalyze@7
        displayName: 'Run SonarQube Analysis'
      
- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Test
  condition: succeeded()
  variables:
  - group: '<acr-credentials-variable-group>'
  jobs:
  - deployment: Deploy
    environment: Production
    pool:
      name: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '<azure-subscription-name>'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az container create \
                --name <container-instance-name> \
                --resource-group <resource-group-name> \
                --image $(containerRegistry)/$(imageRepository):$(tag) \
                --os-type Linux \
                --cpu 1 \
                --memory 1.5 \
                --registry-login-server $(containerRegistry) \
                --registry-username $(username) \
                --registry-password $(password) \
                --dns-name-label <dns-name-label>
